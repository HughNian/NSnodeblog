{
  "name": "loader",
  "version": "0.0.6",
  "description": "Assets loader.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "Loader"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/TBEDP/loader.git"
  },
  "dependencies": {
    "uglify-js": "=1.3.2",
    "clean-css": "=0.4.2"
  },
  "devDependencies": {
    "mocha": ">=0.14.1",
    "should": ">=0.6.0"
  },
  "author": {
    "name": "Jackson Tian"
  },
  "license": "MIT",
  "readme": "loader [![Build Status](https://secure.travis-ci.org/TBEDP/loader.png?branch=master)](http://travis-ci.org/TBEDP/loader)\n======\n\nNode静态资源加载器。该模块通过两个步骤配合完成，代码部分根据环境生成标签。上线时，需要调用minify方法进行静态资源的合并和压缩。\n\n* jscoverage: [100%](http://fengmk2.github.com/coverage/loader.html)\n\n# Usage\n## Installation\n\n```bash\nnpm install loader\n```\n\n## Example\n\n```html\n<%- Loader(\"/assets/scripts/jqueryplugin.min.js\", \"/assets/styles/jqueryplugin.min.css\")\n  .js(\"/assets/scripts/lib/jquery.jmodal.js\")\n  .js(\"/assets/scripts/lib/jquery.mousewheel.min.js\")\n  .js(\"/assets/scripts/lib/jquery.tagsphere.min.js\")\n  .css(\"/assets/styles/jquery.autocomplate.css\")\n  .done(env, version) %>\n```\n### 环境判别\n环境判别由如下代码实现：\n\n```\nprocess.env.NODE_ENV === 'production'\n```\n设置环境：\n\n```\n# 生产环境\nexport NODE_ENV=\"production\"\n# 开发环境\nexport NODE_ENV=\"dev\"\n```\n可切换进`example`目录运行示例代码：\n\n```\nnpm start\n```\n\n### 线上输出\n线上模式将会输出合并和压缩后的地址，该地址从Loader构造参数中得到。  \n\n```html\n<script src=\"/assets/scripts/jqueryplugin.min.js?version=version\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jqueryplugin.min.css?version=version\" media=\"all\" />\n```\n\n### 线下输出\n线下模式输出为原始的文件地址。\n\n```html\n<script src=\"/assets/scripts/lib/jquery.jmodal.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.mousewheel.min.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.tagsphere.min.js\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jquery.autocomplate.css\" media=\"all\" />\n```\n\n## 流程\n![流程](./figures/flow.png)\n\n## API\n### Loader(mincss, minjs)\n构造函数，参数为CSS和JS的合并文件地址，根据后缀名判断，顺序可以互换，但是不能同时为CSS或JS文件。后续通过css或者js加载的文件，都会合并到这两个文件中。  \n### css(path)\n加载CSS文件。  \n### js(path)\n加载JS文件。  \n### done(env, version)\n根据env参数和version参数生成最终的加载标签。  \n`env`：值为`production`或其他。  \n`version`：值为静态文件的版本号，用于生产环境。  \n### Loader.scanDir(folder)\n从指定目录扫描Loader的调用，返回一个扫描得到的合并压缩关系数组。这个关系数组最终将用于生成合并压缩的文件。  \n`folder`：扫描的目录  \n`return`：\n\n```js\n[\n  {min: \"x.min.js\", assets:[\"path1\", \"path2\"]},\n  {min: \"x.min.css\", assets:[\"path1\", \"path2\"]}\n]\n```\n### Loader.minify(basedir, arr, [justCombo])\n从扫描得到的压缩关系数组中进行合并和压缩文件。  \n`basedir`：基本路径，生成的文件将放在此目录下。  \n`arr`：`scanDir`方法返回的关系数组。  \n`justCombo`：如果此参数为true，将不会通过uglify进行编译压缩，仅进行合并，多用于调试线上bug用。\n\n# License\n[MIT license](https://github.com/TBEDP/loader/blob/master/MIT-License)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TBEDP/loader/issues"
  },
  "_id": "loader@0.0.6",
  "dist": {
    "shasum": "b00d2d9ddbc6ad6c9eec4213f7d89db0e52413c9"
  },
  "_from": "loader@",
  "_resolved": "https://registry.npmjs.org/loader/-/loader-0.0.6.tgz"
}
